generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id               String         @id @default(cuid())
  name             String?
  slug             String?        @unique
  email            String         @unique
  emailVerified    DateTime?
  createdAt        DateTime       @default(now()) @map("created_at")
  updatedAt        DateTime       @updatedAt @map("updated_at")
  image            String?
  memberfulId      String?        @unique
  fullname         String?
  profileImageUrl  String?
  bio              String?
  quote            String?
  webLink          String?
  xLink            String?
  instaLink        String?
  substackLink     String?
  accounts         Account[]
  sessions         Session[]
  salons           Salon[]        @relation("HostSalons") // Assuming this refers to the salons they host
  coHostedSalons   Salon[]        @relation("CoHostSalons") // If there's a coHosts field referring back to User
  series           Series[]
  lastMemberTicket DateTime?
  memberTickets    MemberTicket[]
  tips             Tip[]
  stripeConnectedAccountId String?
  notifyOnCreate    Boolean        @default(false)
  notifyOnUpdate    Boolean        @default(false)
  notifyOnDelete    Boolean        @default(false)
  role              USER_ROLE      @default(USER)
}

enum USER_ROLE {
  USER
  ADMIN
  SUPER_ADMIN
}

model LegacyHost {
  id              String @id @default(cuid())
  fullname        String
  bio             String
  profileImageUrl String
  slug            String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Salon {
  id             String         @id @default(cuid())
  hostId         String
  host           User           @relation(fields: [hostId], references: [id], onDelete: Cascade, name: "HostSalons")
  slug           String?        @unique
  title          String         @unique
  description    String
  imageUrl       String?
  state          SALON_STATE    @default(DRAFT)
  type           SALON_TYPE     @default(SALON)
  startTime      DateTime
  endTime        DateTime
  memberSpaces   Int
  publicSpaces   Int
  publicPrice    Int
  category       CATEGORY
  locationType   LOCATION_TYPE
  location       String?
  locationUrl    String?
  zoomId         String?
  zoomStartUrl   String?
  zoomJoinUrl    String?
  seriesId       String?
  series         Series?        @relation(fields: [seriesId], references: [id], onDelete: Cascade)
  publicTickets  PublicTicket[]
  memberTickets  MemberTicket[]
  coHosts        User[]         @relation("CoHostSalons")
  tags           Tag[]          @relation("SalonTags")
  additionalInfo String?
  recordEvent    Boolean        @default(false)
  legacyHost     String?        @default("")
  specialGuests  SpecialGuest[]
  history        SalonHistory[]
}

model SalonHistory {
  id         String   @id @default(cuid())
  salonId    String
  changes    Json
  changedAt  DateTime @default(now())
  Salon      Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
}

model SpecialGuest {
  id        String @id @default(cuid())
  name      String
  email     String
  salonId   String
  salon     Salon   @relation(fields: [salonId], references: [id], onDelete: Cascade)
}

model Tag {
  id     String   @id @default(cuid())
  label  String   @unique
  isActive Boolean  @default(true)
  Salons Salon[]  @relation("SalonTags")
  Series Series[] @relation("SeriesTags")
}

enum SALON_STATE {
  DRAFT
  SUBMITTED
  APPROVED
  PENDING_APPROVAL
}

enum SALON_TYPE {
  SALON
  SUPER_SALON
  SERIES_EPISODE
}

enum CATEGORY {
  SCIENCE
  TECH
  LEGACY
}

enum LOCATION_TYPE {
  IRL
  VIRTUAL
}

enum PAYMENT_STATUS {
  CREATED
  PENDING
  FAILED
  PAID
}

model Series {
  id          String       @id @default(cuid())
  hostId      String
  host        User         @relation(fields: [hostId], references: [id], onDelete: Cascade)
  title       String       @unique
  description String
  imageUrl    String?
  slug        String?      @unique
  salons      Salon[]
  state       SERIES_STATE @default(DRAFT)
  tags        Tag[]        @relation("SeriesTags")
}

enum SERIES_STATE {
  DRAFT
  SUBMITTED
  APPROVED
}

model PublicTicket {
  id              String   @id @default(cuid())
  email           String
  name            String
  salonId         String
  salon           Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  customerEmail   String
  stripePaymentId String
  createdAt       DateTime @default(now())
}

model MemberTicket {
  id        String   @id @default(cuid())
  salonId   String
  salon     Salon    @relation(fields: [salonId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Tip {
  id              String   @id @default(cuid())
  senderEmail     String
  hostId          String
  host            User     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  amount          Int
  stripePaymentId String
  createdAt       DateTime @default(now())
}

model HostRequest {
  id        String   @id @default(cuid())
  email     String
  name      String
  status    String
  createdAt DateTime @default(now())
}